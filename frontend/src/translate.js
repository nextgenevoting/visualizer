'use strict'

// configuration
const yamlPresetFile = 'src/translations.preset.yaml'
const yamlOutFile = 'src/translations.yaml'
const referenceLanguage = 'en'
const warningMessage = `# WARNING: DO NOT EDIT THIS FILE!
#
# Edit \`translation.preset.yaml\` instead, then run \`node translate.js --copy-only\`.
# In order to translate everything automatically, run \`node translate.js\`.

`

// library includes
const yaml = require('js-yaml')
const fs = require('fs')
const translate = require('google-translate-api')
const deepmerge = require('deepmerge')

if (process.argv.length === 2) {
  var data = yaml.safeLoad(fs.readFileSync(yamlPresetFile, 'utf8'))

  const translations = []
  const targetLanguages = Object.keys(data._languages)

  data._keep.forEach((lang) => targetLanguages.splice(targetLanguages.indexOf(lang), 1))
  delete data._keep

  const process = (obj, key, value) => {
    if (key === '_languages') { return }

    if (typeof value === 'string' || value instanceof String) {
      if (key === referenceLanguage) {
        targetLanguages.forEach((lang) => {
          translations.push({ obj: obj, lang: lang, value: value })
        })
      }
    } else {
      Object.entries(value).forEach(([k, value]) => process(obj[key], k, value))
    }
  }

  Object.entries(data).forEach(([key, value]) => process(data, key, value))

  const getTranslation = (i) => {
    if (i === translations.length - 1) {
      fs.writeFile(yamlOutFile, warningMessage + yaml.safeDump(data), (err) => {
        if (err) {
          return console.log(err)
        }

        console.log('done.')
      })

      return
    }

    let t = translations[i]

    translate(t.value, { from: referenceLanguage, to: t.lang }).then(res => {
      console.log(`(${i}/${translations.length}) "${t.value}" in ${t.lang} is "${res.text}"`)
      t.obj[t.lang] = res.text
      getTranslation(++i)
    }).catch(err => {
      console.error(err)
    })
  }

  var i = 0
  getTranslation(i)
} else if (process.argv.length === 3 && process.argv[2] === '--copy-only') {
  var presets = yaml.safeLoad(fs.readFileSync(yamlPresetFile, 'utf8'))
  var translated = yaml.safeLoad(fs.readFileSync(yamlOutFile, 'utf8'))

  data = deepmerge(translated, presets)
  delete data._keep

  fs.writeFile(yamlOutFile, warningMessage + yaml.safeDump(data), (err) => {
    if (err) {
      return console.log(err)
    }

    console.log('done.')
  })
} else {
  console.log('usage: node translate.js [--copy-only]')
}
