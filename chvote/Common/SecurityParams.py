import hashlib
import gmpy2
from gmpy2 import mpz
from math import ceil, log2

from Utils.Utils import BitAbs

class SecurityParams(object):
    """
    This class holds all public security parameters used by many algorithms. For every security level, a separate object should exist holding the corresponding values.
    """
    def hash(self, input):
        hashFunc = hashlib.new('sha256')                            # must be initialized every time before using hashFunc.update()
        hashFunc.update(input)
        hashByteLength = int(self.L)
        return hashFunc.digest()[0:hashByteLength]                  # truncate the hash output to the hash length of the security level

    def getBase64Alphabet(self):
        base64 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-"
        return list(base64)

    def __init__(self, delta, tau, p, q, k, g, h, p_hat, q_hat, k_hat, g_hat, p_prime, L, detRandomGen):

        self.delta = delta                                          # Security strength delta in bits
        self.tau = tau                                              # Security strength tau in bits
        self.p = mpz(p)                                             # Prime group order p
        self.q = mpz(q)                                             # Safeprime group order q
        self.k = mpz(k)                                             # k
        self.g = mpz(g)                                             # Generator g
        self.h = mpz(h)                                             # Generator h
        self.p_hat = mpz(p_hat)                                     # p^
        self.q_hat = mpz(q_hat)                                     # q^
        self.k_hat = mpz(k_hat)                                     # k^
        self.g_hat = mpz(g_hat)                                     # g^
        self.p_prime = mpz(p_prime)                                 # p'
        self.L = L                                                  # Hash Length in bits
        self.deterministicRandomGen = detRandomGen                  # True is deterministic random generation should be used (for testing purposes only!)

        self.s = 3                                                  # Number of authorities
        self.n_max = 255                                            # Max. Number of candidates
        self.epsilon = 0.9999                                       # deterrence factor --> The chance of an undetected attack is 1-deterrenceFactor

        # Return code
        self.A_R = self.getBase64Alphabet()                         # Return code alphabet
        self.L_R = 4                                                # Length of Returncodes in bytes
        self.l_R = ceil((8 * self.L_R + BitAbs(self.n_max)) / log2(len(self.A_R)))     # Length of return codes in characters

        # Finalization code
        self.A_F = self.getBase64Alphabet()                         # Final. code alphabet
        self.L_F = 3                                                # Length of finalizationcode in bytes
        self.l_F = ceil(8 * self.L_F / log2(len(self.A_F)))         # Length of finalization codes in characters

        # Voting code
        self.q_hat_X = q_hat                                        # Upper bound of secret voting credential x
        self.A_X = self.getBase64Alphabet()                         # Voting code alphabet
        self.l_X = ceil(BitAbs(self.q_hat_X) / log2(len(self.A_X)))  # Length of voting codes (characters)

        # Confirmation code
        self.q_hat_Y = q_hat                                        # Upper bound of secret confirmation credential y
        self.A_Y = self.getBase64Alphabet()                         # Confirmation code alphabet
        self.l_Y = ceil(BitAbs(self.q_hat_Y) / log2(len(self.A_Y)))  # Length of confirmation codes in characters

        # calculated values:
        self.L_M = 2 * ceil(BitAbs(p_prime) // 8)  # Length of OT messages (bytes)


# global objects
secparams_l0 = SecurityParams(
    4,
    4,
    2963,
    1481,
    2,
    4,
    9,
    3821,
    191,
    20,
    1622,
    251,
    1,
    True
)

secparams_l1 = SecurityParams(
    80,
    80,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC942593,
    0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F578156305664A12C9,
    2,
    4,
    9,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C562C77CC8FBA599C5FBDA90A7EC659F50FB5FEA292209,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7161D,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFECD143303438D0AAD939DEE60194B8DB990AC80D6ACFBA0AA3C285C4ADD467AA7303859CF5F2B38A8C54CC9F95E67E76F5C2313A29D7AC442E7EE08B437562EFC324E7CA505E33CB314E04A54135A4B65F031105BE082EEBA8,
    0x4ECC560DFEB7F7C6EF0F6B74F3AE8A01DC08FF2A41F1CADB6BFEB2396942EB5E46D5A33EAEFD1AE25AE0C812A82815A04431D991F56FFFD108928AC16DB496AEED72BCCB83A7259A97093FE90991E789F384A478B11FDE984687156832B79C0313BF3660C28043920B0FEBBA1CFC55331F3DA1EFA25A732D0A510CFDA84E00EE,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1,
    20,
    False
)

secparams_l2 = SecurityParams(
    112,
    112,
    0x
    0x
    2,
    4,
    9,
    0x
    0x800000000000000000000000000000000000000000000000000000BD,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8600000000000000000000000000000000000000000000000000022E23FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC7DED8000000000000000000000000000000000000000000000004C0E0F50FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FB33D626600000000000000000000000000000000000000000000A5D1575CB563FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0B28E5011C2A58000000000000000000000000000000000000000169859DDC5C697A10000000566,
    0x8FC32AED89182BD1CAC46EA9CDBECF57DB18D8748E039355CCBC90DEDA214943780680CCD7D379440E833E03681AD5C93C3CCB3909333D2DC500688237C4D0623703823F026FCD67103BA49EE2D3B3DDFAC5B797636FFC4369177FFA357B722935B2EF3B2E3F1DFEA736903F76927794D071A723F79666EE23FF0EDE87AFB3F60792CFFC7078CB96D8A23066C8C412813F5943CF9E98B8FE3E21A0A8F241A830BF39C16BB8F2F21D53EB91F30262A86A043C5DF1167CB748B6EACC5946D612EB8DFEB454E0B1289A7CF66F2940C83CD46118B37B949905AEAF315F537B5B54BF75138603D54BCC4C2D6E72C0E7DD50B5925417E5C277E411B9394FB2FDAC0DF,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1,
    28,
    False
)

secparams_l3 = SecurityParams(
    128,
    128,
    0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006119DF,
    0x
    2,
    4,
    9,
    0x800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001F6FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC6C982AE8AA368D05E56D53,
    0x800000000000000000000000000000000000000000000000000000000000005F,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF420000000000000000000000000000000000000000000000000000000000008D03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF975708000000000000000000000000000000000000000000000000000000004DAD680FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC6594CC42000000000000000000000000000000000000000000000000000002AC9B906703FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE03E48AD38B0800000000000000000000000000000000000000000000000001791C60F6FED00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE81CF008AEE194200000000000000000000000000000000000000000000000CFBA85D98E3494103FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF65D390A88874FA1BF0BEE,
    0x
    0x800000000000000000000000000000000000000000000000000000000000005F,
    32,
    False
)
