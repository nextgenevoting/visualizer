import unittest
import os, sys
from gmpy2 import mpz
import gmpy2

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from chvote.Common.SecurityParams import SecurityParams, secparams_l0, secparams_l3
from chvote.Types                      import *
from chvote.Utils.ToString             import ToString
from chvote.Utils.MarkByteArray        import MarkByteArray
from chvote.Utils.XorByteArray         import XorByteArray
from chvote.PrintingAuthority.GetVotingCard import GetVotingCard
from chvote.Utils.ToString             import ByteArrayToString

def GetVotingCards(v_bold, w_bold, c_bold, n_bold, k_bold, E_bold, D_bold, secparams):
    """
    Algorithm 7.13: Computes the list s = (S_1, ..., S_N) of code sheets for every voter. A
    single code sheet is represented as a String S_i \in A_UCS^* which is generated by Alg. 7.14

    Args:
        v_bold (list):                      Voter description
        w_bold (list):                      Counting circles
        c_bold (list):                      List of candidate descriptions
        n_bold (int):                       Number of candidates
        k_bold (int):                       Number of selections
        E_bold (list):                      Eligibility Matrix
        D_bold (tuple):                     Code Sheet Data
        secparams (SecurityParams):         Collection of public security parameters

    Returns:
        list:                               code sheet
    """

    s_bold = []
    rawSheetData = []

    N_E = len(E_bold)
    for i in range(N_E):
        k_i = [E_bold[i][j] * k_bold[j] for j in range(len(k_bold))]
        sum_x_ij = sum_y_ij = mpz(0)

        for j in range(len(D_bold)):
            sum_x_ij += D_bold[j][i][0]
            sum_y_ij += D_bold[j][i][1]

        X = ToString(sum_x_ij, secparams.l_X, secparams.A_X)   # Voting Code
        Y = ToString(sum_y_ij, secparams.l_Y, secparams.A_Y)   # Confirmation Code
        F_ij = [D_bold[j][i][2] for j in range(len(D_bold))]
        FC = ByteArrayToString(XorByteArray(F_ij), secparams.A_F)
        rc_bold = []

        for k_index in range(sum(n_bold)):
            R_ijk = [D_bold[j][i][3][k_index] for j in range(len(D_bold))]
            R = MarkByteArray(XorByteArray(R_ijk), k_index, secparams.n_max)
            rc_bold.append(ByteArrayToString(R, secparams.A_R))
        s_bold.append(GetVotingCard(i, v_bold[i], w_bold, c_bold, n_bold, k_i, X, Y, FC, rc_bold))
        rawSheetData.append(VotingCard(i, X, Y, FC, rc_bold))

        # the following data structure is additionally returned so we can retrieve a
        # voters data for automatic user input (for example the voting code) without
        # having to parse the votingSheet String

    return (s_bold, rawSheetData)
