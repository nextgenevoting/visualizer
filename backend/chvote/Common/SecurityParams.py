import hashlib
from gmpy2 import mpz
from math import ceil, log2

from chvote.Utils.Utils import BitAbs


class SecurityParams(object):
    """
    This class holds all public security parameters used by many algorithms. For every security level, a separate object should exist holding the corresponding values.
    """
    def hash(self, input):
        hashFunc = hashlib.new('sha256')                            # must be initialized every time before using hashFunc.update()
        hashFunc.update(input)
        hashByteLength = int(self.L)
        return hashFunc.digest()[0:hashByteLength]                  # truncate the hash output to the hash length of the security level

    def getBase64Alphabet(self):
        base64 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-"
        return list(base64)

    def __init__(self, delta, tau, p, q, k, g, h, p_hat, q_hat, k_hat, g_hat, p_prime, L, detRandomGen):

        self.delta = delta                                          # Security strength delta in bits
        self.tau = tau                                              # Security strength tau in bits
        self.p = mpz(p)                                             # Prime group order p
        self.q = mpz(q)                                             # Safeprime group order q
        self.k = mpz(k)                                             # k
        self.g = mpz(g)                                             # Generator g
        self.h = mpz(h)                                             # Generator h
        self.p_hat = mpz(p_hat)                                     # p^
        self.q_hat = mpz(q_hat)                                     # q^
        self.k_hat = mpz(k_hat)                                     # k^
        self.g_hat = mpz(g_hat)                                     # g^
        self.p_prime = mpz(p_prime)                                 # p'
        self.L = L                                                  # Hash Length in bits
        self.deterministicRandomGen = detRandomGen                  # True is deterministic random generation should be used (for testing purposes only!)

        self.s = 3                                                  # Number of authorities
        self.n_max = 255                                            # Max. Number of candidates
        self.epsilon = 0.9999                                       # deterrence factor --> The chance of an undetected attack is 1-deterrenceFactor

        # Return code
        self.A_R = self.getBase64Alphabet()                         # Return code alphabet
        self.L_R = 4                                                # Length of Returncodes in bytes
        self.l_R = ceil((8 * self.L_R + BitAbs(self.n_max)) / log2(len(self.A_R)))     # Length of return codes in characters

        # Finalization code
        self.A_F = self.getBase64Alphabet()                         # Final. code alphabet
        self.L_F = 3                                                # Length of finalizationcode in bytes
        self.l_F = ceil(8 * self.L_F / log2(len(self.A_F)))         # Length of finalization codes in characters

        # Voting code
        self.q_hat_X = q_hat                                        # Upper bound of secret voting credential x
        self.A_X = self.getBase64Alphabet()                         # Voting code alphabet
        self.l_X = ceil(BitAbs(self.q_hat_X) / log2(len(self.A_X)))  # Length of voting codes (characters)

        # Confirmation code
        self.q_hat_Y = q_hat                                        # Upper bound of secret confirmation credential y
        self.A_Y = self.getBase64Alphabet()                         # Confirmation code alphabet
        self.l_Y = ceil(BitAbs(self.q_hat_Y) / log2(len(self.A_Y)))  # Length of confirmation codes in characters

        # calculated values:
        self.L_M = 2 * ceil(BitAbs(p_prime) // 8)  # Length of OT messages (bytes)


# global objects
secparams_l0 = SecurityParams(
    4,
    4,
    563,
    281,
    2,
    4,
    9,
    787,
    131,
    6,
    64,
    251,
    1,
    False
)

secparams_l1 = SecurityParams(
    80,
    80,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC942593,
    0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F578156305664A12C9,
    2,
    4,
    9,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C562C77CC8FBA599C5FBDA90A7EC659F50FB5FEA292209,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7161D,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFECD143303438D0AAD939DEE60194B8DB990AC80D6ACFBA0AA3C285C4ADD467AA7303859CF5F2B38A8C54CC9F95E67E76F5C2313A29D7AC442E7EE08B437562EFC324E7CA505E33CB314E04A54135A4B65F031105BE082EEBA8,
    0x4ECC560DFEB7F7C6EF0F6B74F3AE8A01DC08FF2A41F1CADB6BFEB2396942EB5E46D5A33EAEFD1AE25AE0C812A82815A04431D991F56FFFD108928AC16DB496AEED72BCCB83A7259A97093FE90991E789F384A478B11FDE984687156832B79C0313BF3660C28043920B0FEBBA1CFC55331F3DA1EFA25A732D0A510CFDA84E00EE,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1,
    20,
    False
)

secparams_l2 = SecurityParams(
    112,
    112,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE69D0063,
    0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF34E8031,
    2,
    4,
    9,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD3548E571733F4A8C724DC97F56F0AE89897D8A6B93C6F87D7494503A5D6D,
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D991,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3C244D2E2C2FD60A6164BC77C063F2EBBC35FD1C04CC0935158380D5FC66ECBF2D0EBBF20D83B7128970667D9A93360EF9D99BE7F831A7C2543BDD5A111009853B48C3AA11A3FDB7F5991F05A0316733D358632D2C05854286BD2B40A2FCF623CDA13C8029C5959399C45E01350E63D94F603C42EE50C5E1F254231BF6BBFB71E6C8A004EEB649A6E11D9E37AE093AB3E39CDCD2D426CF47C3E202D9A2E4A0FAB9A54465D906A94137F8EA484202E8898A440D8BEDACC7C0DEAAB473927C635AC35BCACFCE88DD30AC,
    0x7C41B5D002301514D10155BF22BA33947C96EB398837B9E6AC1A25ABFC3F9D44FB7D943A3317771A26615814BB06E58B5531F4D81CF23B778F23A2364FFB0C28A7335AE731761FAB304975C8DB647FCCFC1E64239373F60FAD80FE12D750B3CD753B98D548A325A9A629B06E63A7FC2860D4EB1B885482B64D7177854104554363DFD70DAFDF529F9AFF072F78B7FEAA92D00DC6A7180FF49B60F84979A777919E42484A6A1C014E7F8E8CC184546CAE0557124F7F21FB2C16AC6EF4F122BB70966F9FBF03A7807AF8190CDF95DCDF0509C0FA8302681130E7B60C9E9A65BDF83940F0CCC164989B558B9724D97C524E1A2810E0BB546F83754A846000A9ADB2,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1,
    28,
    False
)

secparams_l3 = SecurityParams(
    128,
    128,
    0x
    0x5BF0A8B1457695355FB8AC404E7A79E3B1738B079C5A6D2B53C26C8228C867F799273B9C49367DF2FA5FC6C6C618EBB1ED0364055D88C2F5A7BE3DABABFACAC24867EA3EBE0CDDA10AC6CAAA7BDA35E76AAE26BCFEAF926B309E18E1C1CD16EFC54D13B5E7DFD0E43BE2B1426D5BCE6A6159949E9074F2F5781563056649F6C3A21152976591C7F772D5B56EC1AFE8D03A9E8547BC729BE95CADDBCEC6E57632160F4F91DC14DAE13C05F9C39BEFC5D98068099A50685EC322E5FD39D30B07FF1C9E2465DDE5030787FC763698DF5AE6776BF9785D84400B8B1DE306FA2D07658DE6944D8365DFF510D68470C23F9FB9BC6AB676CA3206B77869E9BDF3380470C368DF93ADCD920EF5B23A4D23EFEFDCB31961F5830DB2395DFC26130A2724E1682619277886F289E9FA88A5C5AE9BA6C9E5C43CE3EA97FEB95D0557393BED3DD0DA578A446C741B578A432F361BD5B43B7F3485AB88909C1579A0D7F4A7BBDE783641DC7FAB3AF84BC83A56CD3C3DE2DCDEA5862C9BE9F6F261D3C9CB20CE6B,
    2,
    4,
    9,
    0x
    0xB7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190D05D,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF67215EC15D7BB8A7D7B5CB2294EFCAA4C7B3C6906FC93847CD5FEFF6F1F10C1400310C2150C4450843B67D7B0184C0A9B71708B657001B502DFAC3E8E29D3102610EB5B1D9AD470F0EFBC232F5025A3D88C58E70D9D2097C5E4E081BBFEE2373A9B5076970B38F6865D03E16293DBBBCA1B85E3FC5412F7262643B08A2A4CFA5EA43F5F8C9D9986B88155CEA5EC9715322344FF714C84F18D0B19772C421923C7E2CD2A6FE1000FBFCB4BBBBACEBAAF74C38CBC29EE75521F18B03C9816975D948F177476F6EBD8816152A0FECEA7DD6EF0AB7B6A099617F82337346BDFC1CA47586EADF125A9DA7C1D960DDECDE399A37D7470FEFBED9403A4EC70A5841F41F60E3E0D40D70B1A5970EBEC446DF220714E83349462754D5C81F16FCC5ED708EBC21C36C0F3D494E04C15E3C275C18A562BADDA0293ADE9075FAA254E965E73402,
    0x47DAD70733EFE399D1AFF4FE387250218BB88FD5F4040C31851AE1DF0985D0019950A958710C6B935B6B3BB45C278381DC5883CC933C5B7052D3BC8C77D746E3D1FB2B7EF3630C1014417D2F83BEAD0E1F4DFD986104CDF16C4AEC33BB5906C8149C83E6C5B8837E12AB32E73A69C4ABEB0B014FFF1FBB3173EAD73A1404DAEDF52F62D605D3787900124829751320FEDAA1F5B2D90FB846C7EB7815193E5C2460F93A3A5D16FB7A3DBAC9CE31B7517D2F88D530E61D06B529A43A0806F6A931247C9166C32CC9BAA019823528D3F156B60ECE5DA9A6D60148661F59670AD98A1B8EAFEBC4A68D8A5D3F29105FD33D994751A9AD8E0EB7367D5BFE7A2F082981869FA2F177C472D1988844E4DA58170BB3DDE9DFB2E61DC06FA5249C3200CD3BBBF24D5C257879CB23D7931ED4AD1F9FA168B38FAA3C6DB89AA9D89BB6DB3F47BF1BE57856C12AD2FD708A932DC4C91A48E662B37C4076A5D2BE54AC800EC1E6A13E1FC8EB61CA52E5D7B7608483E3BC225FBC62456AB46E39DA3CF45AB11A50,
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43,
    32,
    False
)
